// Job Params
// Requires: PYTEST_OPTIONS, CATTLE_TEST_URL, ADMIN_TOKEN
// Optional: AWS_SSH_PEM_KEY, AWS_SSH_KEY_NAME, DEBUG

node {
  def rootPath = "/src/rancher-validation/"
  def testContainer = "${JOB_NAME}${env.BUILD_NUMBER}_test"

  def setupResultsOut = "setup-results.xml"
  def testResultsOut = "results.xml"
  def imageName = "rancher-validation-tests"
  def testsDir = "tests/v3_api/"

  def branch = "master"
  if ("${env.branch}" != "null" && "${env.branch}" != "") {
    branch = "${env.branch}"
  }

  wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm', 'defaultFg': 2, 'defaultBg':1]) {
    stage('Checkout') {
      deleteDir()
      checkout([
                $class: 'GitSCM',
                branches: [[name: "*/${branch}"]],
                extensions: scm.extensions + [[$class: 'CleanCheckout']],
                userRemoteConfigs: scm.userRemoteConfigs
              ])
    }

    stage('Configure and Build') {
      sh "./tests/v3_api/scripts/configure.sh"
      sh "./tests/v3_api/scripts/build.sh"
    }
    try {
      stage('Run Validation Tests') {
        try {
          sh "docker run --name ${testContainer}  --env-file .env " +
             "${imageName} /bin/bash -c \'pytest -v -s --junit-xml=${testResultsOut} ${PYTEST_OPTIONS} ${testsDir}\'"
        } catch(err) {
          echo 'Test run had failures. Collecting results...'
        }
      }

      stage('Test Report') {
        sh "docker cp ${testContainer}:${rootPath}${testResultsOut} ."
        step([$class: 'JUnitResultArchiver', testResults: "**/${testResultsOut}"])
        sh "docker rm -v ${testContainer}"
      }
    } catch(err){
      sh "docker stop ${testContainer}"
      sh "docker rm -v ${testContainer}"
    }
  }
}