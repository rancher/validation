jobs = [:]
def deleteContainer = "${JOB_NAME}${BUILD_NUMBER}_delete"
def deletePytestOptions = "-k test_delete_rancher_server"
def deleteResultsOut = "delete-results.xml"
def testsDir = "tests/v3_api/"
def imageName = "rancher-validation-tests"
def envFile = ".env"
def RANCHER_DEPLOYED = false

def branch = "master"
if ("${env.branch}" != "null" && "${env.branch}" != "") {
  branch = "${env.branch}"
}

node {
  wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm', 'defaultFg': 2, 'defaultBg':1]) {
    stage('Checkout') {
      deleteDir()
      checkout([
                $class: 'GitSCM',
                branches: [[name: "*/${branch}"]],
                extensions: scm.extensions + [[$class: 'CleanCheckout']],
                userRemoteConfigs: scm.userRemoteConfigs
              ])
    }

    try {
      try {
        stage('Configure and Build') {
          sh "./tests/v3_api/scripts/configure.sh"
          sh "./tests/v3_api/scripts/build.sh"
        }

        stage('Deploy Rancher server') {
          sh "docker run --name ${JOB_NAME}${BUILD_NUMBER} -t --env-file .env rancher-validation-tests /bin/bash " +
             "-c \'pytest -v -s --junit-xml=setup.xml -k test_deploy_rancher_server tests/v3_api/\'"
          sh "docker cp ${JOB_NAME}${BUILD_NUMBER}:/src/rancher-validation/tests/v3_api/rancher_env.config ."
          load "rancher_env.config"
          RANCHER_DEPLOYED = true
        }  
      } catch (err) {
          RANCHER_DEPLOYED = false
          echo "Error: " + err
          currentBuild.result = 'FAILURE'
          error()
      }

      stage('Run provisioning tests') {
        params = [ string(name: 'CATTLE_TEST_URL', value: "${CATTLE_TEST_URL}"), string(name: 'ADMIN_TOKEN', value: "${ADMIN_TOKEN}"), string(name: 'BRANCH', value: branch) ]

        jobs["custom"] = { build job: 'v3_test_custom_cluster', parameters: params}
        jobs["do"] = { build job: 'v3_test_do_cluster', parameters: params }
        jobs["ec2"] = { build job: 'v3_test_ec2_cluster', parameters: params }
        jobs["az"] = { build job: 'v3_test_az_cluster', parameters: params }

        parallel jobs
      }
    } catch(err) {
      echo "Error: " + err
    } finally {
      stage('Delete Rancher Server') {
        try {
          if (RANCHER_DELETE_SERVER.toLowerCase() == "true" && RANCHER_DEPLOYED) {
            echo "Sleeping for ${RANCHER_DELETE_DELAY} hours before deleting Rancher server"
            sleep(time: RANCHER_DELETE_DELAY.toInteger(), unit: "HOURS")
            sh "docker run --name ${deleteContainer} -t --env-file ${envFile} " +
             "${imageName} /bin/bash -c \'export CATTLE_TEST_URL=${CATTLE_TEST_URL} && " +
             "export ADMIN_TOKEN=${ADMIN_TOKEN} && pytest -v -s --junit-xml=${deleteResultsOut} " +
             "${deletePytestOptions} ${testsDir}\'"
          }
          else {
            echo "Rancher server not deployed, skipping delete."
          }
        } catch(err) {
          echo "Error: " + err
          currentBuild.result = 'FAILURE'
        }
      }

      stage('Test Report') {
        sh "docker cp ${JOB_NAME}${BUILD_NUMBER}:/src/rancher-validation/setup.xml ."
        step([$class: 'JUnitResultArchiver', testResults: '**/setup.xml'])
      }

      stage('Cleanup') {
        sh "docker stop ${JOB_NAME}${BUILD_NUMBER}"
        sh "docker rm -v ${JOB_NAME}${BUILD_NUMBER}"
      }
    }
  }
}